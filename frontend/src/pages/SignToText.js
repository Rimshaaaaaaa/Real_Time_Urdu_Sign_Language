import React, { useRef, useState, useEffect } from "react";
import "../App.css";

function SignToText() {
  const videoRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const [recording, setRecording] = useState(false);
  const [prediction, setPrediction] = useState(null);
  const [confidence, setConfidence] = useState(null);
  const [loading, setLoading] = useState(false);

  const gestureClasses = [
    'ÿßÿ≥⁄©ŸàŸÑ', 'ÿßŸÜÿ™€ÅÿßŸäŸî€å', 'ÿßŸÜ⁄Øÿ±€åÿ≤€å', 'ÿßŸìŸàŸî', 'ÿßŸìŸæ', 'ÿß⁄Ü⁄æÿß', 'ÿß€ÅŸÖ', 'ÿ®ŸÜÿØ ⁄©ÿ±Ÿà', 'ÿ®ŸàŸÑŸÜÿß', 'ÿ®⁄æÿßÿ±€å',
    'ÿ®⁄æŸà⁄©€í €ÅŸà', 'ÿ™ŸÖ', 'ÿ™€åÿßÿ±', 'ÿ¨ÿßÿ™ÿß €ÅŸà', 'ÿ¨ŸÑÿØ€å', 'ÿÆÿ®ÿ±ÿØÿßÿ±', 'ÿÆÿ∑ÿ±ŸÜÿß⁄©', 'ÿÆŸàŸÅŸÜÿß⁄©', 'ÿØÿ±Ÿàÿßÿ≤€Å', 'ÿØŸÑ⁄Üÿ≥Ÿæ',
    'ÿØŸàÿ±', 'ÿØ⁄©⁄æŸÜÿß', 'ÿØ€åÿ± ÿ≥€í', 'ÿ∞€Å€åŸÜ', 'ÿ≥ÿ≥ÿ™ÿß', 'ÿ≥ŸÖÿ¨⁄æ ⁄Ø€åÿß', 'ÿ¥Ÿàÿ±', 'ÿµÿ≠ÿ™ ŸÖŸÜÿØ', 'ÿπŸèŸÑ€åŸ∞ ÿ≥ŸéŸÖŸéÿ™ ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ',
    'ÿ∫€åÿ± ŸÖŸÑ⁄©€å', 'ŸÑÿßÿ¨Ÿàÿßÿ®', 'ŸÑ€åÿß €Å€í', 'ŸÖÿ¨⁄æ ÿ≥€í', 'ŸÖÿ≠ÿ™ÿßÿ∑', 'ŸÖÿ≠ŸÅŸàÿ∏', 'ŸÖÿ∂ÿ≠⁄©€Å ÿÆ€åÿ≤', 'ŸÖŸÑŸÜÿß', 'ŸÖ€Åÿ∞ÿ®',
    'ŸÖ€å⁄∫', 'ŸÜ€Å€å⁄∫', 'ŸÜ€åÿß', 'Ÿπ€å Ÿà€å', 'ŸæÿßŸÜ€å Ÿæ€åŸÜÿß', 'Ÿæÿß⁄ØŸÑ', 'Ÿæÿ±ÿßŸÖŸÜ', 'Ÿæÿ±ÿ¨Ÿàÿ¥', '⁄Üÿß€Åÿ™ÿß€ÅŸà', '⁄©ŸÖ',
    '⁄©⁄æŸÜÿß ⁄©⁄æÿßŸàŸî', '⁄©€åÿß', '⁄ØŸàŸÜ⁄Øÿß', '€Åÿß⁄∫', '€ÅŸà', '€ÅŸàÿ¥€åÿßÿ±'
  ];

  useEffect(() => {
    const initCamera = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        streamRef.current = stream;
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err) {
        console.error("Error accessing webcam:", err);
      }
    };

    initCamera();

    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, []);

  const handleStartRecording = () => {
    setRecording(true);
    setPrediction(null);
    setConfidence(null);

    const chunks = [];
    const stream = streamRef.current;

    if (!stream) {
      alert("Webcam not initialized");
      return;
    }

    const mediaRecorder = new MediaRecorder(stream);
    mediaRecorderRef.current = mediaRecorder;

    mediaRecorder.ondataavailable = (e) => {
      if (e.data.size > 0) {
        chunks.push(e.data);
      }
    };

    mediaRecorder.onstop = async () => {
      const blob = new Blob(chunks, { type: "video/webm" });
      const formData = new FormData();
      formData.append("video", blob, "gesture.webm");

      setLoading(true); // Start loading while waiting for response

      try {
        const response = await fetch("http://127.0.0.1:8000/predict_video", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (response.ok) {
          setPrediction(result.prediction);
          setConfidence((result.confidence * 100).toFixed(2));
        } else {
          console.error("Prediction error:", result.error);
          setPrediction("Error");
          setConfidence("0");
        }
      } catch (error) {
        console.error("API call failed:", error);
        setPrediction("Error");
        setConfidence("0");
      }

      setLoading(false); // Done loading
      setRecording(false);
    };

    mediaRecorder.start();

    setTimeout(() => {
      mediaRecorder.stop();
    }, 1200); // ‚è±Ô∏è Record for 3 seconds
  };

  return (
    <div className="container">
      <div className="card">
        <h2 className="title">‚úã Sign to Text Translator</h2>

        <div className="video-wrapper">
          <video ref={videoRef} autoPlay muted className="video" />
        </div>

        <button
          className="record-button"
          onClick={handleStartRecording}
          disabled={recording || loading}
        >
          {recording ? "üé• Recording..." : loading ? "‚è≥ Processing..." : "‚ñ∂Ô∏è Start Recording"}
        </button>

        {/* Show status below button */}
        {recording && <p className="status">üé• Recording in progress...</p>}
        {!recording && loading && <p className="status">‚è≥ Please wait, analyzing gesture...</p>}

        {prediction && (
          <div className="output-card">
            <p><strong>Predicted Gesture:</strong> {prediction}</p>
            <p><strong>Confidence:</strong> {confidence}%</p>
          </div>
        )}
      </div>
    </div>
  );
}

export default SignToText;
